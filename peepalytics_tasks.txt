----------------------- Task 1 ----------------------------------------

scripts/preprocess.py ---- this is the preprocessed script
data/processed ---- this will contain the processed images


#install pdf2image
#install popplar

import os
import cv2
import numpy as np
from pdf2image import convert_from_path
from PIL import Image

def deskew_image(image, angle_threshold=1.0):
    """
    Deskews a PIL image if the skew angle is significant, preserving original layout (landscape/portrait).
    """
    # Convert PIL image to grayscale OpenCV format
    img = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2GRAY)

    # Invert for better thresholding (black text on white)
    img_inverted = cv2.bitwise_not(img)

    # Apply Otsu's thresholding
    _, binary = cv2.threshold(img_inverted, 0, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)

    # Find non-zero pixel coordinates
    coords = np.column_stack(np.where(binary > 0))
    rect = cv2.minAreaRect(coords)
    angle = rect[-1]

    # Normalize angle to avoid flipping orientation
    if angle < -45:
        angle = 90 + angle
    elif angle > 45:
        angle = angle - 90

    print(f"Detected skew angle: {angle:.2f}Â°")

    # If not significantly skewed, return original image
    if abs(angle) < angle_threshold:
        print("Image is not significantly skewed.")
        return image

    # Get image size and rotation matrix
    (h, w) = img.shape
    center = (w // 2, h // 2)
    M = cv2.getRotationMatrix2D(center, angle, 1.0)

    # Rotate while keeping original dimensions
    rotated = cv2.warpAffine(img_inverted, M, (w, h), flags=cv2.INTER_CUBIC, borderMode=cv2.BORDER_REPLICATE)

    # Invert back and convert to RGB for PIL
    deskewed = cv2.bitwise_not(rotated)
    final_img = cv2.cvtColor(deskewed, cv2.COLOR_GRAY2RGB)
    return Image.fromarray(final_img)

def pdf_to_images_with_deskew(pdf_path, output_folder, dpi=300):
    """
    Converts a PDF to deskewed images and saves them to the specified output folder.
    """
    os.makedirs(output_folder, exist_ok=True)
    pages = convert_from_path(pdf_path, dpi=dpi)

    for i, page in enumerate(pages):
        print(f"\nProcessing page {i + 1}...")
        processed_image = deskew_image(page)

        output_path = os.path.join(output_folder, f"page_{i + 1}.jpg")
        processed_image.save(output_path, format="JPEG")
        print(f"Saved: {output_path}")

# Running code
file_path = "/content/drive/MyDrive/Colab Notebooks/Peepalytics/sample_dataset.pdf"
output_folder = '/content/drive/MyDrive/Colab Notebooks/Peepalytics/data/processed/'
pdf_to_image(file_path, output_folder)